---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import Link from "@components/Link.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Tag from "@components/Tag.astro";

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}
type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content, headings } = await project.render();
---

<Layout title={project.data.title} description={project.data.description} tags={project.data.tags}>
  <Container>
    <div class="animate">
      <BackToPrevious href="/projects">Back to projects</BackToPrevious>
    </div>
    <div class="animate my-10 space-y-1">
      <div class="flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(project.body)}
        </div>
      </div>
      <h1 class="text-3xl font-semibold text-black dark:text-white">
        {project.data.title}
      </h1>
      {
        (project.data.demoURL || project.data.repoURL) && (
          <nav class="flex gap-1">
            {project.data.demoURL && (
              <Link href={project.data.demoURL}>
                demo
              </Link>
            )}
            {project.data.demoURL && project.data.repoURL && <span>/</span>}
            {project.data.repoURL && (
              <Link href={project.data.repoURL}>
                repo
              </Link>
            )}
          </nav>
        )
      }
      <!-- Add the tags here -->
      {project.data.tags && project.data.tags.length > 0 && (
        <div class="mt-4 flex flex-wrap gap-2">
          {project.data.tags.map((tag: string) => (
            <Tag name={tag} />
          ))}
        </div>
      )}
    </div>
    <TableOfContents headings={headings} />
    <article class="animate">
      <Content />
    </article>
  </Container>
</Layout>

<script>
  document.addEventListener('astro:page-load', () => {
    const links = document.querySelectorAll('article a');
    links.forEach(link => {
      if (link instanceof HTMLAnchorElement && link.hostname !== window.location.hostname && !link.querySelector('svg')) {
        link.setAttribute('target', '_blank');
        link.setAttribute('rel', 'noopener noreferrer');
        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        svg.setAttribute('width', '12');
        svg.setAttribute('height', '12');
        svg.setAttribute('viewBox', '0 0 24 24');
        svg.setAttribute('fill', 'none');
        svg.setAttribute('stroke', 'currentColor');
        svg.setAttribute('stroke-width', '2');
        svg.setAttribute('stroke-linecap', 'round');
        svg.setAttribute('stroke-linejoin', 'round');
        svg.setAttribute('class', 'ml-1 inline-block');
        svg.innerHTML = `
          <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
          <polyline points="15 3 21 3 21 9"></polyline>
          <line x1="10" y1="14" x2="21" y2="3"></line>
        `;
        link.appendChild(svg);
      }
    });
  });
</script>