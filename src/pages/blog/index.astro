---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import FilterTags from "@components/FilterTags.astro";
import { BLOG } from "@consts";

const allPosts = await getCollection("blog");
const posts = allPosts.filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Get all unique tags
const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))];

type Acc = {
  [year: string]: CollectionEntry<"blog">[];
};

const postsByYear = posts.reduce((acc: Acc, post) => {
  const year = post.data.date.getFullYear().toString();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {});

const years = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a));
---

<Layout title={BLOG.TITLE} description={BLOG.DESCRIPTION}>
  <Container>
    <aside data-pagefind-ignore>
      <FilterTags tags={allTags} />
      <div class="space-y-10" id="post-list">
        {years.map((year) => (
          <div class="mb-10 year-section">
            <h2 class="text-2xl font-bold mb-4">{year}</h2>
            <div class="space-y-4">
              {postsByYear[year].map((post) => (
                <div class="post-item" data-tags={post.data.tags?.join(',')}>
                  <ArrowCard entry={post} />
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </aside>
  </Container>
</Layout>

<script>
  function initializeFiltering() {
    console.log("Initializing filtering");

    function filterPosts() {
      console.log("Filtering posts");
      const selectedTags = Array.from(document.querySelectorAll('.tag-filter.selected'))
        .map(button => button.getAttribute('data-tag'));
      console.log("Selected tags:", selectedTags);

      const postItems = document.querySelectorAll('.post-item');
      console.log("Total post items:", postItems.length);

      let visibleCount = 0;

      postItems.forEach(item => {
        const postTags = item.getAttribute('data-tags')?.split(',') || [];
        const shouldShow = selectedTags.length === 0 || selectedTags.some(tag => postTags.includes(tag));
        item.style.display = shouldShow ? '' : 'none';
        if (shouldShow) visibleCount++;
        console.log(`Post ${item.textContent.slice(0, 20)}... - Tags: ${postTags.join(', ')} - Visible: ${shouldShow}`);
      });

      console.log(`Visible posts after filtering: ${visibleCount}`);

      // Show a message if no posts are visible
      const noResultsMessage = document.getElementById('no-results-message');
      if (noResultsMessage) {
        noResultsMessage.style.display = visibleCount === 0 ? 'block' : 'none';
      }
    }

    // Attach event listeners
    document.addEventListener('filterUpdate', filterPosts);

    const tagButtons = document.querySelectorAll('.tag-filter');
    tagButtons.forEach(button => {
      button.addEventListener('click', () => {
        button.classList.toggle('selected');
        document.dispatchEvent(new Event('filterUpdate'));
      });
    });

    const clearFiltersButton = document.getElementById('clear-filters');
    if (clearFiltersButton) {
      clearFiltersButton.addEventListener('click', () => {
        tagButtons.forEach(button => button.classList.remove('selected'));
        document.dispatchEvent(new Event('filterUpdate'));
      });
    }

    // Initial filter to ensure everything is visible at start
    filterPosts();
  }

  // Run initialization on page load and on view transitions
  document.addEventListener('astro:page-load', initializeFiltering);
</script>