---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import { SPEAKING } from "@consts";

const allSpeakingEvents = await getCollection("speaking");
const speakingEvents = allSpeakingEvents
  .filter((event) => !event.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Get all unique tags
const allTags = [...new Set(speakingEvents.flatMap(event => event.data.tags || []))];

type Acc = {
  [year: string]: CollectionEntry<"speaking">[];
};

const speakingByYear = speakingEvents.reduce((acc: Acc, event) => {
  const year = event.data.date.getFullYear().toString();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(event);
  return acc;
}, {});

const years = Object.keys(speakingByYear).sort((a, b) => parseInt(b) - parseInt(a));
---

<Layout title={SPEAKING.TITLE} description={SPEAKING.DESCRIPTION}>
  <Container>
    <aside data-pagefind-ignore>
      <div class="space-y-10" id="speaking-list">
        {years.map((year) => (
          <div class="mb-10 year-section">
            <h2 class="text-2xl font-bold mb-4">{year}</h2>
            <div class="space-y-4">
              {speakingByYear[year].map((event) => (
                <div class="speaking-item" data-tags={event.data.tags?.join(',')}>
                  <ArrowCard entry={event} />
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </aside>
  </Container>
</Layout>