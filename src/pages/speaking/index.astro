---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import FilterTags from "@components/FilterTags.astro";
import { SPEAKING } from "@consts";

const allSpeakingEvents = await getCollection("speaking");
const speakingEvents = allSpeakingEvents
  .filter((event) => !event.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Get all unique tags
const allTags = [...new Set(speakingEvents.flatMap(event => event.data.tags || []))];

type Acc = {
  [year: string]: CollectionEntry<"speaking">[];
};

const speakingByYear = speakingEvents.reduce((acc: Acc, event) => {
  const year = event.data.date.getFullYear().toString();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(event);
  return acc;
}, {});

const years = Object.keys(speakingByYear).sort((a, b) => parseInt(b) - parseInt(a));
---

<Layout title={SPEAKING.TITLE} description={SPEAKING.DESCRIPTION}>
  <Container>
    <aside data-pagefind-ignore>
      <FilterTags tags={allTags} />
      <div class="space-y-10" id="speaking-list">
        {years.map((year) => (
          <div class="mb-10 year-section">
            <h2 class="text-2xl font-bold mb-4">{year}</h2>
            <div class="space-y-4">
              {speakingByYear[year].map((event) => (
                <div class="speaking-item" data-tags={event.data.tags?.join(',')}>
                  <ArrowCard entry={event} />
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </aside>
  </Container>
</Layout>

<script hoist>
  function initializeFiltering() {
    function filterSpeakingEvents() {
      const selectedTags = Array.from(document.querySelectorAll('.tag-filter.selected'))
        .map(button => button.getAttribute('data-tag'));
      const speakingItems = document.querySelectorAll('.speaking-item');
      const yearSections = document.querySelectorAll('.year-section');

      speakingItems.forEach(item => {
        const eventTags = item.getAttribute('data-tags')?.split(',') || [];
        const shouldShow = selectedTags.length === 0 || selectedTags.some(tag => eventTags.includes(tag));
        item.style.display = shouldShow ? 'block' : 'none';
      });

      // Hide year sections if all events in that year are hidden
      yearSections.forEach(section => {
        const visibleEvents = section.querySelectorAll('.speaking-item[style="display: block;"]');
        section.style.display = visibleEvents.length > 0 ? 'block' : 'none';
      });
    }

    // Attach event listeners
    document.addEventListener('filterUpdate', filterSpeakingEvents);

    const tagButtons = document.querySelectorAll('.tag-filter');
    tagButtons.forEach(button => {
      button.addEventListener('click', () => {
        button.classList.toggle('selected');
        document.dispatchEvent(new Event('filterUpdate'));
      });
    });

    const clearFiltersButton = document.getElementById('clear-filters');
    if (clearFiltersButton) {
      clearFiltersButton.addEventListener('click', () => {
        tagButtons.forEach(button => button.classList.remove('selected'));
        document.dispatchEvent(new Event('filterUpdate'));
      });
    }

    // Ensure filter section is always visible
    const filterSection = document.getElementById('filter-tags-section');
    if (filterSection) {
      filterSection.style.display = 'block';
      filterSection.style.visibility = 'visible';
      filterSection.style.opacity = '1';
    }
  }

  // Run initialization on page load and on view transitions
  document.addEventListener('astro:page-load', initializeFiltering);
</script>